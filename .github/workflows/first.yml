name: first CD

# 파일 실행 트리거 설정
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

# 깃허브 액션 VM이 읽을 수 있도록 허용
permissions:
  contents: read

# 실행될 동작 정의
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Print current directory
      run: pwd

    - name: List files in current directory
      run: ls -al

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: "adopt"

    # Github secrets 에서 데이터를 받아서 워크 플로우에 application.properties 생성
    - name: Make application.properties
      run: |
        cd ./src/main/resources
        touch ./application.properties
        echo "${{ secrets.PROPERTIES }}" > ./application.properties
      shell: bash

    # gradle을 통해 소스코드 빌드
    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test

    # dockerfile을 통해 이미지 빌드 & docker repository에 push
    - name: Docker build & push to docker repo
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}:v1.0 .
        docker push ${{ secrets.DOCKER_REPO }}:v1.0

    # appleboy/ssh-action@master 액션을 사용하여 지정한 서버에 ssh 로 접속하고 스크립트 실행
    # 도커의 기존 프로세스 제거 & docker repository 로부터 위에서 push한 내용을 pull 받아서 실행
    # 실행 시, docker-compose 사용
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        script: |
          sudo docker rm -f $(docker ps -qa)
          sudo docker pull ${{ secrets.DOCKER_REPO }}:v1.0
          sudo docker-compose up -d
          sudo docker image prune -f
        show-output: true
